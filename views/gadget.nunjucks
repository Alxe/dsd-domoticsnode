{% extends '_base.nunjucks' %}

{% import '_components.njk' as comp %}

{% block content %}
<main id="sensors">
  <div class="row">
    <h2>Sensores:</h2>
  </div>
  <div class="row">
  {% for s in sensors_cfg -%}
    {{ comp.sensor_field(s, readonly=(not editable)) }}
  {%- endfor %}
  </div>
  <hr />
  <div class="row">
    <h2>Actuadores:</h2>
  </div>
  <div class="row align-items-center">
    <p class="my-auto mr-3 lead">Persiana autom√°tica:</p>
    <input type='button' class="btn btn-secondary" id="auto-blinds-btn" value="OFF">
  </div>
  <div class="row">
  {% for a in actuators_cfg -%}
    {{ comp.actuator_field(a, readonly=(not editable)) }}
  {%- endfor %}
  </div>
  <hr />
  <div class="row">
    <h2 class="col-sm-12 col-md-4">Mensajes:</h2>
    <ol class="col-sm-12 col-md-8 list-group" id="messages">
    </ol>
  </div>
</main>
{% endblock %}

{% block script %}
<script>
function addMessage(str) {
  const messages = document.getElementById('messages');
  
  let li = document.createElement('li');
  li.className = 'list-group-item';
  li.innerHTML = str;

  messages.appendChild(li);
}

function updateValue(obj, value) {
  if(obj.value === value) return;
  let e = document.getElementById(obj.id);
  e.value = obj.value = value;
  addMessage('Nuevo valor de \'' + obj.id + '\': ' + obj.value);
}

const ceil5 = (v) => Math.ceil(v/5)*5;

const sArr = {{ sensors_cfg | dump | safe }};
const aArr = {{ actuators_cfg | dump | safe }};

const autoBlindsBtn = document.getElementById('auto-blinds-btn');
const getAutoBlindsState = () => autoBlindsBtn.value === 'ON';
const setAutoBlindsState = (bool) => autoBlindsBtn.value = bool ? 'ON' : 'OFF';
autoBlindsBtn.addEventListener('click', e => {
  setAutoBlindsState(!getAutoBlindsState());
  if(!getAutoBlindsState()) return;
  for(const s of sArr) {
    if(s.id !== 'light') continue;
    for(const a of aArr) {
      if(a.id !== 'blinds') continue;
      updateValue(a, s.value);
      break;
    }
  }
});


const sensors = io('/sensors').on('update', (id, value) => {
  for(const s of sArr) {
    if(s.id !== id) continue;

    const v = Number(value) < 0 ? 0 : 
                Number(value) > 100 ? 100 : 
                  Number(value);
    updateValue(s, v);
    if(s.id === 'light' && getAutoBlindsState() && v >= 10.0) {
      for(const a of aArr) {
        if(a.id !== 'blinds') continue;
        updateValue(a, ceil5(v));
        break;
      }
    }
  }
});

const actuators = io('/actuators').on('update', (id, value) => {
  for(const a of aArr) {
    if(a.id !== id) continue;
    updateValue(a, value)
  }
}).on('toggle', (id) => {
  for(const a of aArr) {
    if(a.id !== id) continue;
    const v = Number(a.value);
    updateValue(a, v === 0 ? 100.0 : 0.0);
  }
}).on('increase', (id) => {
  for(const a of aArr) {
    if(a.id !== id) continue;
    const v = Number(a.value) + 5;
    updateValue(a, v > 100 ? 100 : v);
  }
}).on('decrease', (id) => {
  for(const a of aArr) {
    if(a.id !== id) continue;
    const v = Number(a.value) - 5;
    updateValue(a, v < 0 ? 0 : v);
  }
});

{% if editable %}
for(const s of sArr) {
  let e = document.getElementById(s.id);
  e.addEventListener('keyup', (ev) => {
    let v = Number(e.value) || -1.0;
    if(ev.keyCode != 13 || v === s.value) return;
    sensors.emit('update', s.id, v);
  });
}
for(const a of aArr) {
  let e = document.getElementById(a.id);
  e.addEventListener('click', () => {
    if(a.id === 'blinds') setAutoBlindsState(false);
    actuators.emit('toggle', a.id);
  });

  let eUp = document.getElementById(a.id + '-up');
  eUp.addEventListener('click', () => {
    if(a.id === 'blinds') setAutoBlindsState(false);
    actuators.emit('increase', a.id);
  });

  let eDown = document.getElementById(a.id + '-down');
  eDown.addEventListener('click', () => {
    if(a.id === 'blinds') setAutoBlindsState(false);
    actuators.emit('decrease', a.id);
  });

}
{% endif %}
</script>
{% endblock %}